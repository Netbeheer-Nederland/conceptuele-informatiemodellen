= {{ schema.title }}

:toc:
:toclevels: 3
:parent: {{ schema.title }}

{%- macro uri_link(curie) -%}
  {%- set curie_md = gen.uri_link(curie) -%}
  {{ curie_md.strip(")").replace("[", "`").replace("]", "`").split("(") | reverse | join("[") ~ "]" }}
{%- endmacro -%}

{%- macro key_symbol(class, slot) -%}
    {%- for key in class.unique_keys -%}
        {%- if slot.name in class.unique_keys[key].unique_key_slots -%}
            ⚿{nbsp}
        {%- endif -%}
    {%- endfor -%}
{%- endmacro -%}

{%- macro id_safe(v) -%}
    {%- set allowed = 'abcdefghijklmnopqrstuvwxyz0123456789-' -%}
    {%- for c in v|lower -%}
        {%- if c in allowed -%}
            {{ c }}
        {%- elif c == ' ' -%}
            -
        {%- endif -%}
    {%- endfor -%}
{%- endmacro -%}

{%- macro link(name) -%}
    <<{{ id_safe(name) }},{{ name }}>>
{%- endmacro -%}

{%- macro anchor(name) -%}
    [[{{id_safe(name)}}]]
{%- endmacro -%}

{%- macro range(name) -%}
    {%- set base_types = {
        'string': 'tekst',
        'integer': 'geheel getal',
        'boolean': 'waar of onwaar',
        'float': 'reëel getal',
        'double': 'reëel getal',
        'decimal': 'decimaal getal',
        'time': 'tijd van de dag',
        'date': 'datum',
        'datetime': 'datum en tijd',
        'date_or_datetime': 'datum en eventueel tijd',
        'uriorcurie': 'URI of CURIE',
        'curie': 'CURIE',
        'uri': 'URI',
        'ncname': 'prefixnaam' } -%}
    {%- if name in base_types -%}
        {{ base_types[name] }}
    {%- elif name in schemaview.all_classes() -%}
        {%- set class = schemaview.get_class(name) -%}
        {%- if class.annotations.external_registry -%}
            {{ name }} ({{class.annotations.external_registry.value}})
        {%- else -%}
            {{ link(name) }}
        {%- endif -%}
    {%- else -%}
        {{ link(name) }}
    {%- endif -%}
{%- endmacro -%}

{%- macro compute_range(slot) -%}
    {%- if slot.any_of or slot.exactly_one_of -%}
        {%- for subslot_range in schemaview.slot_range_as_union(slot) | reject('eq', slot.range) -%}
            {%- if slot.exactly_one_of -%}
                {%- if not loop.first -%}
                    {nbsp}
                {%- endif -%}
                óf {{ range(subslot_range) }}
            {%- else -%}
                {{ range(subslot_range) }}
                {%- if not loop.last -%}
                    {nbsp}en/of{nbsp}
                {%- endif -%}
            {%- endif -%}
        {%- endfor -%}
    {%- else -%}
        {{ range(slot.range) }}
    {%- endif -%}
    {%- if slot.unit.ucum_code -%}
        {nbsp}({{ slot.unit.ucum_code }})
    {%- endif -%}
{%- endmacro -%}

{%- macro mappings_line(element, type, label) -%}
    {%- set mappings = schemaview.get_mappings(element.name).get(type, []) -%}
    {%- if mappings -%}
        {%- set linked = [] -%}
        {%- for m in mappings -%}
            {%- set _ = linked.append(uri_link(m)) -%}
        {%- endfor -%}
        {{- label ~ ': ' ~ linked | join(', ') -}}
    {%- endif -%}
{%- endmacro -%}

{% macro omschrijving(element) -%}
    {%- set parts = namespace(items=[]) -%}

    {# NBility #}
    {%- for a in element.annotations -%}
        {%- if a == 'nbility' -%}
            {%- set _ = parts.items.append('NBility: https://nbility-model.github.io/NBility-business-capabilities-Archi/?view=id-8becf2d90261476faa9d53240e6cf2c8[' ~ element.annotations[a].value ~ ']') -%}
        {%- endif -%}
    {%- endfor -%}

    {# description #}
    {%- if element.description -%}
        {# source #}
        {%- if element.source -%}
            {%- set _ = parts.items.append('_' ~ element.description ~ '_' ~ ' (zie ' ~ uri_link(element.source) ~ ')') -%}
        {%- else -%}
            {%- set _ = parts.items.append('_' ~ element.description ~ '_') -%}
        {%- endif -%}
    {%- endif -%}

    {# meaning #}
    {%- if element.meaning -%}
        {%- set _ = parts.items.append('_' ~ uri_link(element.meaning) ~ '_') -%}
    {%- endif -%}

    {# exact_mappings  #}
    {%- set exact_mappings = mappings_line(element, 'exact', 'Exact overeenkomstig') -%}
    {%- if exact_mappings -%}
        {%- set _ = parts.items.append(exact_mappings) -%}
    {%- endif -%}

    {# close_mappings  #}
    {%- set close_mappings = mappings_line(element, 'close', 'Vrijwel overeenkomstig') -%}
    {%- if close_mappings -%}
        {%- set _ = parts.items.append(element, close_mappings) -%}
    {%- endif -%}

    {# related_mappings  #}
    {%- set related_mappings = mappings_line(element, 'related', 'Gerelateerd') -%}
    {%- if related_mappings -%}
        {%- set _ = parts.items.append(related_mappings) -%}
    {%- endif -%}

    {# narrow_mappings  #}
    {%- set narrow_mappings = mappings_line(element, 'narrow', 'Nauwer') -%}
    {%- if narrow_mappings -%}
        {%- set _ = parts.items.append(narrow_mappings) -%}
    {%- endif -%}

    {# broad_mappings  #}
    {%- set broad_mappings = mappings_line(element, 'broad', 'Breder') -%}
    {%- if broad_mappings -%}
        {%- set _ = parts.items.append(broad_mappings) -%}
    {%- endif -%}

    {# comments #}
    {%- if element.comments -%}
        {%- set _ = parts.items.append(element.comments | join('\n\n')) -%}
    {%- endif -%}

    {# see_also #}
    {%- if element.see_also -%}
        {%- set linked = [] -%}
        {%- for s in element.see_also -%}
            {%- set _ = linked.append(uri_link(s)) -%}
        {%- endfor -%}
        {%- set _ = parts.items.append('Zie ook ' ~ linked | join(', ')) -%}
    {%- endif -%}

    {# tijdlijnen #}
    {%- set tijdlijn_annotaties = [] -%}
    {%- for a in element.annotations -%}
        {%- if a.startswith('tijdlijn_') and element.annotations[a].value|string|lower == "true" -%}
            {%- set _ = tijdlijn_annotaties.append(a.replace('tijdlijn_', '')) -%}
        {%- elif a == 'levensduur' and element.annotations[a].value|string|lower == "true" -%}
            {%- if element.annotations.levensduur_begin and element.annotations.levensduur_einde -%}
                {%- set _ = tijdlijn_annotaties.append(a ~ ' (' ~ element.annotations.levensduur_begin.value ~ ', ' ~ element.annotations.levensduur_einde.value ~ ')') -%}
            {%- else -%}
                {%- set _ = tijdlijn_annotaties.append(a) -%}
            {%- endif -%}
        {%- endif -%}
    {%- endfor -%}
    {%- if tijdlijn_annotaties -%}
        {%- set _ = parts.items.append('Tijdlijnen: ' ~ tijdlijn_annotaties|join(', ')) -%}
    {%- endif -%}

    {{ parts.items | join('\n\n') }}
{%- endmacro -%}

[WARNING,caption="Let op"]
--
Deze website is in opbouw. Pagina's kunnen onvolledige of onjuiste informatie bevatten.
--

{{ omschrijving(schema) }}

image::{{ schema.name }}.drawio.svg[]

.Legenda
[%collapsible]
====
Komt nog!
====

.LinkML
[%collapsible]
====

[source,yaml]
....
include::attachment${{ schema.name }}.linkml.yml[]
....

====

== Entiteiten

{% for class in gen.all_class_objects() | sort(attribute=sort_by) %}
{% if class.name != 'Any' and not class.annotations.external_registry %}

{{anchor(class.name)}}
=== {{class.name}}

{% if class.is_a %}
Specialisatie van {{link(schemaview.get_class(class.is_a).name)}}
{% endif %}

{{omschrijving(class)}}

{% set properties = [] %}
{% set relationships = [] %}
{% for slot in gen.get_direct_slots(class) | sort(attribute=sort_by) %}
    {% set effective_ranges = [] %}
    {% set sub_expressions = (slot.any_of or []) + (slot.all_of or []) + (slot.exactly_one_of or []) %}
    {% if sub_expressions %}
        {% for sub in sub_expressions %}
            {% for r in schemaview.slot_range_as_union(sub) %}
                {% if r not in effective_ranges %}
                    {% set _ = effective_ranges.append(r) %}
                {% endif %}
            {% endfor %}
        {% endfor %}
    {% else %}
        {% set effective_ranges = schemaview.slot_range_as_union(slot) %}
    {% endif %}
    {% set some_are_classes = effective_ranges | select('in', schemaview.all_classes()) | list | length > 0 %}
    {% if some_are_classes %}
        {% set _ = relationships.append(slot) %}
    {% else %}
        {% set _ = properties.append(slot) %}
    {% endif %}
{% endfor %}

{% if properties %}
==== Eigenschappen

[cols="1,1,3",width="100%"]
|===
| Eigenschap | Waardespecificatie | Omschrijving

{% for slot in properties -%}
| {{key_symbol(class, slot)}}{{slot.name}} {{is_unique_key_slot}}
| {{compute_range(slot)}} +
_{{gen.cardinality(slot)}}_
| {{omschrijving(slot)}}
{% endfor %}
|===
{% endif %}

{% if relationships %}
==== Relaties

[cols="2,3",width="100%"]
|===
| {{class.name}} is ... | Omschrijving

{% for slot in relationships -%}
| {{key_symbol(class, slot)}}{{slot.name}} {{compute_range(slot)}} +
_{% if slot.annotations.inverse_cardinality %}{{slot.annotations.inverse_cardinality.value }}{% endif %} → {{ gen.cardinality(slot) }}_
| {{omschrijving(slot)}}
{% endfor %}
|===
{% endif %}

{% endif %}
{% endfor %}

== Waardesoorten en waardelijsten

{% for t in gen.all_type_objects() | sort(attribute=sort_by) -%}
{% if loop.first %}
=== Waardesoorten

[cols="1,3,1,1",width="100%"]
|===
| Waardesoort | Omschrijving | Gebaseerd op | Patroon

{% endif -%}
| {{anchor(t.name)}}{{t.name}}
| {{omschrijving(t)}}
| {% if t.typeof %}{{link(t.typeof)}}{% else %}{{range(t.base)}}{% endif %}
| {% if t.pattern %}`{{t.pattern}}`{% endif %}
{% if loop.last %}
|===
{% endif %}
{% endfor %}

{% for e in gen.all_enum_objects() | sort(attribute=sort_by) %}
{% if loop.first %}
=== Waardelijsten
{% endif %}

{{ anchor(e.name) }}
==== {{e.name}}

{{omschrijving(e)}}

[cols="1,5",width="100%"]
|===
| Waarde | Omschrijving

{% if e.permissible_values -%}
{% for pv in e.permissible_values.values() | sort(attribute='text') -%}
| {{pv.text}}
| {{omschrijving(pv)}}
{% endfor -%}
{% else -%}
| {{e.name}}
| _dynamisch_
{% endif -%}
|===

{% endfor %}
